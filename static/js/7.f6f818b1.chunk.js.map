{"version":3,"sources":["components/pages/contact/Contact.tsx"],"names":["Contact","useState","animateVariant","setAnimateVariant","useEffect","validationSchema","yup","email","required","subject","min","max","message","handleSubmit","resetForm","a","axiosWithConfig","post","setTimeout","Error","container","useRef","Scroll","animateScroll","scrollTo","current","offsetTop","ContactContainer","ref","validateOnMount","validateOnChange","initialValues","onSubmit","setSubmitting","values","errors","touched","handleChange","handleBlur","isSubmitting","isValid","FromStyled","Validation","autoComplete","className","type","name","onChange","onBlur","value","placeholder","initial","animate","variants","visible","x","opacity","transition","delay","duration","hidden","Textarea","Button","disabled","styled","main","theme","colors","backgroundSecondary","borderPrimary","Form","mq","md","div","error","motion","button","textPrimary","layout","props","disable","textarea","hover"],"mappings":"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","file":"static/js/7.f6f818b1.chunk.js","sourcesContent":["import { Form, Formik } from 'formik';\nimport { motion } from 'framer-motion';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Scroll from 'react-scroll';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\nimport axiosWithConfig from '../../../utils/axiosWithConfig';\nimport Input from '../../shared/Input';\n\nexport interface ContactProps {}\n\nconst Contact: React.FC<ContactProps> = () => {\n  const [animateVariant, setAnimateVariant] = useState('hidden');\n  useEffect(() => {\n    setAnimateVariant('visible');\n  }, []);\n\n  const validationSchema = yup.object({\n    email: yup.string().email('Wpisz email.').required('Email jest wymagany.'),\n    subject: yup\n      .string()\n      .required('Temat jest wymagany.')\n      .min(6, 'Zbyt krótki temat.')\n      .max(50, 'Temat nie powinien być dłuższy niź 50 znaków.'),\n    message: yup\n      .string()\n      .required('Wiadomość jest wymagana.')\n      .min(6, 'Zbyt krótka wiadomość.')\n      .max(500, 'Wiadomość nie powinna mieć więcej jak 500 znaków.'),\n  });\n\n  const handleSubmit = async (email: string, subject: string, message: string, resetForm: () => void) => {\n    try {\n      await axiosWithConfig.post('/api/contact', {\n        email,\n        subject,\n        message,\n      });\n\n      await setAnimateVariant('hidden');\n      await resetForm();\n      await setTimeout(() => {\n        setAnimateVariant('visible');\n      }, 1400);\n    } catch (err) {\n      Error(err);\n    }\n  };\n\n  // Scroll animation\n  const container = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    Scroll.animateScroll.scrollTo(container.current ? container.current.offsetTop - 5 : 0);\n  }, []);\n\n  return (\n    <ContactContainer ref={container}>\n      <Formik\n        validateOnMount\n        validateOnChange\n        validationSchema={validationSchema}\n        initialValues={{\n          email: '',\n          subject: '',\n          message: '',\n        }}\n        onSubmit={async ({ email, subject, message }, { setSubmitting, resetForm }) => {\n          await setSubmitting(true);\n          await handleSubmit(email, subject, message, resetForm);\n          await setSubmitting(false);\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur, isSubmitting, isValid }) => (\n          <FromStyled>\n            {errors.email && touched.email && <Validation>{errors.email}</Validation>}\n            <Input\n              autoComplete=\"off\"\n              className={errors.email && touched.email ? 'errorInput' : ''}\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              placeholder=\"Email\"\n              initial=\"hidden\"\n              animate={animateVariant}\n              variants={{\n                visible: { x: 0, opacity: 1, transition: { delay: 0.3, duration: 0.2 } },\n                hidden: { x: 100, opacity: 0, transition: { delay: 0.3, duration: 0.2 } },\n              }}\n            />\n\n            {errors.subject && touched.subject && <Validation>{errors.subject}</Validation>}\n            <Input\n              autoComplete=\"off\"\n              className={errors.subject && touched.subject ? 'errorInput' : ''}\n              type=\"subject\"\n              name=\"subject\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.subject}\n              placeholder=\"Temat\"\n              initial=\"hidden\"\n              animate={animateVariant}\n              variants={{\n                visible: { x: 0, opacity: 1, transition: { delay: 0.2, duration: 0.2 } },\n                hidden: { x: 100, opacity: 0, transition: { delay: 0.2, duration: 0.2 } },\n              }}\n            />\n            {errors.message && touched.message && <Validation>{errors.message}</Validation>}\n            <Textarea\n              className={errors.message && touched.message ? 'errorInput' : ''}\n              name=\"message\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.message}\n              placeholder=\"Wiadomość\"\n              initial=\"hidden\"\n              animate={animateVariant}\n              variants={{\n                visible: { x: 0, opacity: 1, transition: { delay: 0.1, duration: 0.2 } },\n                hidden: { x: 100, opacity: 0, transition: { delay: 0.1, duration: 0.2 } },\n              }}\n            />\n            <Button\n              disabled={isSubmitting || !isValid}\n              type=\"submit\"\n              initial=\"hidden\"\n              animate={animateVariant}\n              variants={{\n                visible: { x: 0, opacity: 1, transition: { delay: 0, duration: 0.2 } },\n                hidden: { x: 100, opacity: 0, transition: { delay: 0, duration: 0.2 } },\n              }}\n            >\n              Wyślij\n            </Button>\n          </FromStyled>\n        )}\n      </Formik>\n    </ContactContainer>\n  );\n};\n\nexport default Contact;\n\nconst ContactContainer = styled.main`\n  overflow: hidden;\n  background-color: ${({ theme }) => theme.colors.backgroundSecondary};\n  margin-top: 10px;\n  border: 1px solid ${({ theme }) => theme.colors.borderPrimary};\n`;\nconst FromStyled = styled(Form)`\n  width: auto;\n  margin: 10px 0 5px;\n  display: flex;\n  flex-direction: column;\n  padding: 5px;\n  ${({ theme }) => theme.mq.md} {\n    margin: 10vh auto 5px;\n    max-width: 500px;\n  }\n`;\nconst Validation = styled.div`\n  color: ${({ theme }) => theme.colors.error};\n  font-size: 12px;\n  margin: 0 0 5px 0;\n`;\nconst Button = styled(motion.button)`\n  background: ${({ theme }) => theme.colors.backgroundSecondary};\n  color: ${({ theme }) => theme.colors.textPrimary};\n  font-size: 20px;\n  border: 1px solid ${({ theme }) => theme.colors.layout};\n  height: 35px;\n  width: 20%;\n  align-self: flex-end;\n  margin: 0 0 50px;\n  &:disabled {\n    color: ${(props) => props.theme.colors.disable};\n    border: 1px solid ${({ theme }) => theme.colors.disable};\n  }\n`;\nconst Textarea = styled(motion.textarea)`\n  background: ${({ theme }) => theme.colors.backgroundSecondary};\n  color: ${({ theme }) => theme.colors.layout};\n  font-size: 20px;\n  font-family: inherit;\n  font-weight: 400;\n  border: 1px solid ${({ theme }) => theme.colors.layout};\n  flex-basis: 200px;\n  resize: none;\n  margin: 0 0px 15px 0px;\n  padding: 5px;\n  ${({ theme }) => theme.mq.md} {\n    flex-basis: 200px;\n  }\n  &:hover,\n  &:focus {\n    outline: none;\n    border: 1px solid ${({ theme }) => theme.colors.hover};\n  }\n`;\n"],"sourceRoot":""}