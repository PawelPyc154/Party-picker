{"version":3,"sources":["components/content/pages/loginSignup/login/Login.tsx","components/content/pages/loginSignup/signup/Signup.tsx","components/content/pages/loginSignup/fbAndGoogle/FbAndGoogle.tsx","components/content/pages/loginSignup/LoginSignup.tsx"],"names":["styled","section","motion","h2","Form","media","tablet","input","div","button","FaFacebookSquare","FaGoogle","LoginSignup","useState","container","useRef","useEffect","Scroll","animateScroll","scrollTo","current","offsetTop","history","useHistory","user","useSelector","state","AuthReducer","push","main"],"mappings":"kuCAiJuBA,IAAOC,QAAV,KACLD,YAAOE,IAAOC,GAAdH,CAAH,KAGOA,YAAOI,IAAPJ,CAAH,IAMZK,IAAMC,QAKIN,YAAOE,IAAOK,MAAdP,CAAH,KAaQA,IAAOQ,IAAV,KAMDR,YAAOE,IAAOO,OAAdT,CAAH,K,ihCCDYA,IAAOC,QAAV,KACND,YAAOE,IAAOC,GAAdH,CAAH,KAGOA,YAAOI,IAAPJ,CAAH,IAMZK,IAAMC,QAKIN,YAAOE,IAAOK,MAAdP,CAAH,KAcQA,IAAOQ,IAAV,KAMDR,YAAOE,IAAOO,OAAdT,CAAH,K,cArMZ,I,gvCC2D6BA,IAAOC,QAAV,IAKtBI,IAAMC,QAsBqBN,YAAOU,IAAPV,CAAH,KAOFA,IAAOS,OAAV,KAgBAT,YAAOW,IAAPX,CAAH,K,4FC1ELY,UAvCkC,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAI/CC,GAJ+C,UAInCC,iBAAuB,OACzCC,qBAAU,WACRC,IAAOC,cAAcC,SAASL,EAAUM,QAAUN,EAAUM,QAAQC,UAAY,EAAI,KACnF,IAEH,IAAMC,EAAUC,cACRC,EAASC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,eAAhDH,KACRR,qBAAU,WACJQ,GACFF,EAAQM,KAAK,OAEd,CAACJ,EAAMF,KA0BiBtB,IAAO6B,KAAV","file":"static/js/8.e0f26c31.chunk.js","sourcesContent":["import React, { useState, Dispatch, SetStateAction } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\nimport media from '../../../../../utils/MediaQueries';\nimport { setLogin, clearError } from '../../../../../state/auth/action';\nimport { AppState } from '../../../../../state/allReducers';\nimport Loading from '../../../../universalComponents/Loading';\n\nexport interface LoginPropsProps {\n  errorServerVisibleOn: string;\n  setErrorServerVisibleOn: Dispatch<SetStateAction<string>>;\n}\n\nconst LoginProps: React.SFC<LoginPropsProps> = ({\n  errorServerVisibleOn,\n  setErrorServerVisibleOn,\n}) => {\n  const dispatch = useDispatch();\n\n  const { error } = useSelector((state: AppState) => state.AuthReducer);\n\n  const [animationStop, setAnimationStop] = useState(false);\n\n  const validationSchema = yup.object({\n    email: yup.string().email('Invalid email').required('Required'),\n    password: yup.string().required('Required').min(6, 'Too Short!'),\n  });\n\n  const handleChangeClearError = (\n    e: React.ChangeEvent<any>,\n    handleChange: (e: React.ChangeEvent<any>) => void,\n  ) => {\n    dispatch(clearError());\n    handleChange(e);\n  };\n\n  return (\n    <LoginContainer>\n      <Formik\n        validateOnChange\n        validationSchema={validationSchema}\n        initialValues={{\n          email: 'elo@gmail.com',\n          password: '123456',\n        }}\n        onSubmit={async ({ email, password }, { setSubmitting }) => {\n          setSubmitting(true);\n          setErrorServerVisibleOn('login');\n          setAnimationStop(true);\n          try {\n            await dispatch(setLogin(email, password));\n          } catch {\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur, isSubmitting, isValid }) =>\n          isSubmitting ? (\n            <div style={{ height: 188 }}>\n              <Loading height={80} width={80} />\n            </div>\n          ) : (\n            <FromStyled>\n              <Header\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.9, duration: 0.2 }}\n              >\n                Logowanie\n              </Header>\n\n              {errors.email && touched.email ? (\n                <Validation>{errors.email}</Validation>\n              ) : (\n                errorServerVisibleOn === 'login' &&\n                typeof error !== 'string' &&\n                error?.email && <Validation>{error.email}</Validation>\n              )}\n              <Input\n                autoComplete=\"off\"\n                style={errors.email && touched.email ? { border: '1px solid #e74c3c' } : {}}\n                type=\"email\"\n                name=\"email\"\n                onChange={(e) => handleChangeClearError(e, handleChange)}\n                onBlur={handleBlur}\n                value={values.email}\n                placeholder=\"Email *\"\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.8, duration: 0.2 }}\n              />\n\n              {errors.password && touched.password ? (\n                <Validation>{errors.password}</Validation>\n              ) : (\n                errorServerVisibleOn === 'login' &&\n                typeof error !== 'string' &&\n                error?.password && <Validation>{error.password}</Validation>\n              )}\n              <Input\n                autoComplete=\"off\"\n                style={errors.password && touched.password ? { border: '1px solid #e74c3c' } : {}}\n                type=\"password\"\n                name=\"password\"\n                onChange={(e) => handleChangeClearError(e, handleChange)}\n                onBlur={handleBlur}\n                value={values.password}\n                placeholder=\"Password *\"\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.7, duration: 0.2 }}\n              />\n\n              <Button\n                style={\n                  isValid && values.email && values.password\n                    ? {\n                        color: 'white',\n                        border: '1px solid #3498db',\n                        backgroundColor: isSubmitting ? '#3498db' : 'transparent',\n                      }\n                    : {}\n                }\n                disabled={isValid && isSubmitting}\n                type=\"submit\"\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.6, duration: 0.2 }}\n              >\n                Wy≈õlij\n              </Button>\n            </FromStyled>\n          )\n        }\n      </Formik>\n    </LoginContainer>\n  );\n};\n\nexport default LoginProps;\n\nconst LoginContainer = styled.section``;\nconst Header = styled(motion.h2)`\n  margin-bottom: 10px;\n`;\nconst FromStyled = styled(Form)`\n  width: auto;\n  margin: 10px 5px 5px;\n  display: flex;\n  flex-direction: column;\n\n  ${media.tablet} {\n    margin: 10px auto 5px;\n    max-width: 500px;\n  }\n`;\nconst Input = styled(motion.input)`\n  background: #181818;\n  height: 40px;\n  color: #3498db;\n  margin: 0 0px 15px 0px;\n  border: none;\n  border: 1px solid #3498db;\n  padding: 2px;\n  font-size: 16px;\n  &:focus {\n    outline: none;\n  }\n`;\nconst Validation = styled.div`\n  color: #e74c3c;\n  font-size: 12px;\n  margin: 0 0 5px 0;\n`;\n\nconst Button = styled(motion.button)`\n  background: #181818;\n  color: #6f6f6f;\n  font-size: 20px;\n  border: 1px solid #6f6f6f;\n  height: 35px;\n  width: 20%;\n  align-self: flex-end;\n`;\n","import React, { useState, Dispatch, SetStateAction } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport media from '../../../../../utils/MediaQueries';\nimport { setRegister, clearError } from '../../../../../state/auth/action';\nimport { AppState } from '../../../../../state/allReducers';\nimport Loading from '../../../../universalComponents/Loading';\n\nexport interface SignupProps {\n  errorServerVisibleOn: string;\n  setErrorServerVisibleOn: Dispatch<SetStateAction<string>>;\n}\n\nconst Signup: React.SFC<SignupProps> = ({ errorServerVisibleOn, setErrorServerVisibleOn }) => {\n  const dispatch = useDispatch();\n  const { error } = useSelector((state: AppState) => state.AuthReducer);\n\n  const [animationStop, setAnimationStop] = useState(false);\n\n  const validationSchema = yup.object({\n    name: yup.string().required('Required'),\n    email: yup.string().email('Invalid email').required('Required'),\n    password: yup.string().required('Required').min(6, 'Too Short!'),\n    password2: yup\n      .string()\n      .required('Required')\n      .oneOf([yup.ref('password'), null], 'Passwords must match'),\n  });\n\n  const handleChangeClearError = (\n    e: React.ChangeEvent<any>,\n    handleChange: (e: React.ChangeEvent<any>) => void,\n  ) => {\n    dispatch(clearError());\n    handleChange(e);\n  };\n\n  return (\n    <SignupContainer>\n      <Formik\n        validateOnChange\n        validationSchema={validationSchema}\n        initialValues={{\n          name: 'elo',\n          email: 'elo@gmail.com',\n          password: '123456',\n          password2: '123456',\n        }}\n        onSubmit={async ({ name, email, password }, { setSubmitting }) => {\n          setSubmitting(true);\n          setErrorServerVisibleOn('signup');\n          setAnimationStop(true);\n          try {\n            await dispatch(setRegister(name, email, password));\n          } catch {\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur, isSubmitting, isValid }) =>\n          isSubmitting ? (\n            <div style={{ height: 360 }}>\n              <Loading height={80} width={80} />\n            </div>\n          ) : (\n            <FromStyled>\n              <Header\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.5, duration: 0.2 }}\n              >\n                Rejestracja\n              </Header>\n              {errors.name && touched.name ? (\n                <Validation>{errors.name}</Validation>\n              ) : (\n                errorServerVisibleOn === 'signup' &&\n                typeof error !== 'string' &&\n                error?.name && <Validation>{error.name}</Validation>\n              )}\n              <Input\n                autoComplete=\"off\"\n                style={errors.name && touched.name ? { border: '1px solid #e74c3c' } : {}}\n                type=\"name\"\n                name=\"name\"\n                onChange={(e) => handleChangeClearError(e, handleChange)}\n                onBlur={handleBlur}\n                value={values.name}\n                placeholder=\"Nazwa u≈ºytkownika *\"\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.4, duration: 0.2 }}\n              />\n              {errors.email && touched.email ? (\n                <Validation>{errors.email}</Validation>\n              ) : (\n                errorServerVisibleOn === 'signup' &&\n                typeof error !== 'string' &&\n                error?.email && <Validation>{error.email}</Validation>\n              )}\n              <Input\n                autoComplete=\"off\"\n                style={errors.email && touched.email ? { border: '1px solid #e74c3c' } : {}}\n                type=\"email\"\n                name=\"email\"\n                onChange={(e) => handleChangeClearError(e, handleChange)}\n                onBlur={handleBlur}\n                value={values.email}\n                placeholder=\"Email *\"\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.3, duration: 0.2 }}\n              />\n              {errors.password && touched.password ? (\n                <Validation>{errors.password}</Validation>\n              ) : (\n                errorServerVisibleOn === 'signup' &&\n                typeof error !== 'string' &&\n                error?.password && <Validation>{error.password}</Validation>\n              )}\n              <Input\n                autoComplete=\"off\"\n                style={errors.password && touched.password ? { border: '1px solid #e74c3c' } : {}}\n                type=\"password\"\n                name=\"password\"\n                onChange={(e) => handleChangeClearError(e, handleChange)}\n                onBlur={handleBlur}\n                value={values.password}\n                placeholder=\"Password *\"\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.2, duration: 0.2 }}\n              />\n              {errors.password2 && touched.password2 && <Validation>{errors.password2}</Validation>}\n              <Input\n                autoComplete=\"off\"\n                style={errors.password2 && touched.password2 ? { border: '1px solid #e74c3c' } : {}}\n                type=\"password\"\n                name=\"password2\"\n                onChange={(e) => handleChangeClearError(e, handleChange)}\n                onBlur={handleBlur}\n                value={values.password2}\n                placeholder=\"Potwierdz has≈Ço *\"\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0.1, duration: 0.2 }}\n              />\n              <Button\n                style={\n                  isValid && values.email && values.password\n                    ? {\n                        color: 'white',\n                        border: '1px solid #3498db',\n                        backgroundColor: isSubmitting ? '#3498db' : 'transparent',\n                      }\n                    : {}\n                }\n                disabled={isValid && isSubmitting}\n                type=\"submit\"\n                initial={animationStop ? {} : { x: 100, opacity: 0 }}\n                animate={animationStop ? {} : { x: [100, 0], opacity: [0, 1] }}\n                transition={{ delay: 0, duration: 0.2 }}\n              >\n                Wy≈õlij\n              </Button>\n            </FromStyled>\n          )\n        }\n      </Formik>\n    </SignupContainer>\n  );\n};\n\nexport default Signup;\n\nconst SignupContainer = styled.section``;\nconst Header = styled(motion.h2)`\n  margin-bottom: 10px;\n`;\nconst FromStyled = styled(Form)`\n  width: auto;\n  margin: 10px 5px 5px;\n  display: flex;\n  flex-direction: column;\n\n  ${media.tablet} {\n    margin: 0 auto 5px;\n    max-width: 500px;\n  }\n`;\nconst Input = styled(motion.input)`\n  background: #181818;\n  height: 40px;\n  color: #3498db;\n  margin: 0 0px 15px 0px;\n\n  border: none;\n  border: 1px solid #3498db;\n  padding: 2px;\n  font-size: 16px;\n  &:focus {\n    outline: none;\n  }\n`;\nconst Validation = styled.div`\n  color: #e74c3c;\n  font-size: 12px;\n  margin: 0 0 5px 0;\n`;\n\nconst Button = styled(motion.button)`\n  background: #181818;\n  color: #6f6f6f;\n  font-size: 20px;\n  border: 1px solid #6f6f6f;\n  height: 35px;\n  width: 20%;\n  align-self: flex-end;\n  margin: 0 0 50px;\n`;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\nimport FacebookLogin from 'react-facebook-login';\nimport { GoogleLogin } from 'react-google-login';\nimport styled from 'styled-components';\n\nimport { FaFacebookSquare, FaGoogle } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { motion } from 'framer-motion';\nimport { useHistory } from 'react-router-dom';\nimport media from '../../../../../utils/MediaQueries';\n\nimport { setLoginRegisterGoogleFb } from '../../../../../state/auth/action';\nimport { AppState } from '../../../../../state/allReducers';\n\nexport interface FbAndGoogleProps {}\n\nconst FbAndGoogle: React.SFC<FbAndGoogleProps> = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { error } = useSelector((state: AppState) => state.AuthReducer);\n\n  const handleResponse = async (res: any, strategy: string) => {\n    dispatch(setLoginRegisterGoogleFb(res, strategy));\n    if (!error) {\n      history.push('/');\n    }\n  };\n\n  return (\n    <FbAndGoogleContainer>\n      <motion.div\n        initial={{ x: 100, opacity: 0 }}\n        animate={{ x: [100, 0], opacity: [0, 1] }}\n        transition={{ delay: 1.1, duration: 0.2 }}\n      >\n        <FacebookLogin\n          appId={`${process.env.REACT_APP_FACEBOOK_APP_ID}`}\n          autoLoad={false}\n          fields=\"name,email,picture\"\n          callback={(res) => handleResponse(res, 'facebook')}\n          cssClass=\"facebookLogin\"\n          icon={<FaFacebookSquareStyled />}\n        />\n      </motion.div>\n      <motion.div\n        initial={{ x: 100, opacity: 0 }}\n        animate={{ x: [100, 0], opacity: [0, 1] }}\n        transition={{ delay: 1, duration: 0.2 }}\n      >\n        <GoogleLogin\n          clientId={`${process.env.REACT_APP_GOOGLE_APP_ID}`}\n          buttonText=\"Login with Google\"\n          onSuccess={(res) => handleResponse(res, 'google')}\n          onFailure={(res) => handleResponse(res, 'google')}\n          cookiePolicy=\"single_host_origin\"\n          isSignedIn={false}\n          autoLoad={false}\n          render={(renderProps) => (\n            <GoogleLoginStyled\n              type=\"button\"\n              onClick={renderProps.onClick}\n              disabled={renderProps.disabled}\n            >\n              <FaGoogleStyled /> <p>Login with Google</p>\n            </GoogleLoginStyled>\n          )}\n        />\n      </motion.div>\n    </FbAndGoogleContainer>\n  );\n};\n\nexport default FbAndGoogle;\n\nconst FbAndGoogleContainer = styled.section`\n  width: auto;\n  margin: 10px 5px 5px;\n  display: flex;\n  flex-direction: column;\n  ${media.tablet} {\n    margin: 10vh auto 5px;\n    max-width: 500px;\n  }\n\n  .facebookLogin {\n    width: 100%;\n    height: 40px;\n    background-color: #415dae;\n    border: none;\n    margin: 0 0 15px 0;\n    color: white;\n    font-size: 15px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    &:hover {\n      opacity: 0.8;\n    }\n  }\n`;\nconst FaFacebookSquareStyled = styled(FaFacebookSquare)`\n  justify-self: flex-start;\n  position: absolute;\n  top: calc(50% - 12px);\n  left: 10px;\n  font-size: 24px;\n`;\nconst GoogleLoginStyled = styled.button`\n  width: 100%;\n  height: 40px;\n  background-color: #d9534f;\n  border: none;\n  margin: 0 0 15px 0;\n  color: white;\n  font-size: 15px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\nconst FaGoogleStyled = styled(FaGoogle)`\n  justify-self: flex-start;\n  position: absolute;\n  top: calc(50% - 12px);\n  left: 10px;\n  font-size: 24px;\n`;\n","import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Scroll from 'react-scroll';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport Login from './login/Login';\nimport Signup from './signup/Signup';\nimport FbAndGoogle from './fbAndGoogle/FbAndGoogle';\nimport { AppState } from '../../../../state/allReducers';\n\nexport interface LoginSignupProps {}\n\nconst LoginSignup: React.SFC<LoginSignupProps> = () => {\n  const [errorServerVisibleOn, setErrorServerVisibleOn] = useState('');\n\n  // Scroll animation\n  const container = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    Scroll.animateScroll.scrollTo(container.current ? container.current.offsetTop - 5 : 0);\n  }, []);\n\n  const history = useHistory();\n  const { user } = useSelector((state: AppState) => state.AuthReducer);\n  useEffect(() => {\n    if (user) {\n      history.push('/');\n    }\n  }, [user, history]);\n\n  return (\n    // const reqTest = async () => {\n    //   const res = await axiosWithBaseURL.get('/auth/facebook');\n    //   console.log(res);\n    // };\n\n    <LoginSignupContainer ref={container}>\n      {/* <button type=\"button\" onClick={() => reqTest()}>\n        fb\n      </button> */}\n      <FbAndGoogle />\n      <Login\n        errorServerVisibleOn={errorServerVisibleOn}\n        setErrorServerVisibleOn={setErrorServerVisibleOn}\n      />\n      <Signup\n        errorServerVisibleOn={errorServerVisibleOn}\n        setErrorServerVisibleOn={setErrorServerVisibleOn}\n      />\n    </LoginSignupContainer>\n  );\n};\nexport default LoginSignup;\n\nconst LoginSignupContainer = styled.main`\n  overflow: hidden;\n`;\n"],"sourceRoot":""}